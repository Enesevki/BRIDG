"""
Django settings for gamehost_project project.

Generated by 'django-admin startproject' using Django 5.2.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

import os
from pathlib import Path
from dotenv import load_dotenv

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Load environment variables from .env file
load_dotenv(BASE_DIR / '.env')

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.getenv('SECRET_KEY')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True  # Keep this as True for development, set to False in production

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',

    # Third-party apps (We'll add DRF, etc. here later)
    'rest_framework',  # Django REST Framework for API development
    'rest_framework_simplejwt',  # JWT authentication for DRF
    'rest_framework_simplejwt.token_blacklist',  # JWT token blacklisting for logout
    'django_filters',  # Django Filter for API filtering
    'corsheaders',  # Django CORS Headers for cross-origin requests
    
    # Our local apps
    'users.apps.UsersConfig',  # User management and authentication
    'games.apps.GamesConfig',  # Game hosting and management
    'interactions.apps.InteractionsConfig',  # User interactions (ratings, reports, etc.)
]

CACHES = {  # Bu produksiyon ortamında Redis veya Memcached gibi bir cache kullanabilirsiniz.
    'default': {
        'BACKEND': 'django.core.cache.backends.locmem.LocMemCache',
        'LOCATION': 'unique-snowflake',  # Geliştirme için rastgele bir isim, 
    }
}

MIDDLEWARE = [
    'corsheaders.middleware.CorsMiddleware',  # CORS middleware should be as high as possible
    'gamehost_project.middleware.CORSSecurityMiddleware',  # Custom CORS security checks
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'gamehost_project.middleware.SecurityHeadersMiddleware',  # Additional security headers
    'gamehost_project.middleware.APIVersionMiddleware',  # API versioning
    'gamehost_project.rate_limiting.SimpleRateLimitMiddleware',  # Rate limiting after auth
]

ROOT_URLCONF = 'gamehost_project.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / 'templates'],  # Email templates directory eklendi
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'gamehost_project.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql', # Use the PostgreSQL engine
        'NAME': os.getenv('DB_NAME'),             # Read DB Name from .env
        'USER': os.getenv('DB_USER'),             # Read DB User from .env
        'PASSWORD': os.getenv('DB_PASSWORD'),       # Read DB Password from .env
        'HOST': os.getenv('DB_HOST', 'localhost'), # Read DB Host, default to localhost
        'PORT': os.getenv('DB_PORT', '5432'),      # Read DB Port, default to 5432
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = '/static/'

# Geliştirme sırasında Django'nun kendi statik dosyalarını (admin için olanlar gibi)
# ve bizim uygulamalarımızın static/ altındaki dosyalarını bulacağı yerler.
# Bizim doğrudan proje köküne eklediğimiz static/images/default...png için
# aşağıdaki STATICFILES_DIRS ayarı önemlidir.
STATICFILES_DIRS = [
    BASE_DIR / 'static',  # Projenizin ana 'backend' dizinindeki 'static' klasörünü belirtir
]

# Üretim ortamında 'collectstatic' komutunun statik dosyaları toplayacağı yer.
# Geliştirme sırasında bu çok kritik değil ama tanımlı olması iyidir.
# STATIC_ROOT = BASE_DIR / 'staticfiles_collected' # Genellikle .gitignore'a eklenir

# backend/gamehost_project/settings.py
# ... (diğer ayarlar) ...

# Media files (User-uploaded files)
# https://docs.djangoproject.com/en/dev/ref/settings/#media-root
# https://docs.djangoproject.com/en/dev/ref/settings/#media-url

MEDIA_URL = '/media/'  # Yüklenen dosyalara erişim için URL ön eki (örneğin, http://localhost:8000/media/dosya.jpg)
MEDIA_ROOT = BASE_DIR / 'media'  # Yüklenen dosyaların sunucuda saklanacağı ana dizin
                                # BASE_DIR projenin backend klasörünü gösterir.
                                # backend/media/ dizini oluşturulacak.

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# Oyun yüklemeleri için maksimum dosya boyutu (Megabyte cinsinden)
MAX_GAME_ZIP_SIZE_MB = 50  # Örneğin 50 MB

# =============================================================================
# FILE UPLOAD SECURITY CONFIGURATION
# =============================================================================

# File Security Settings for Game Uploads
FILE_UPLOAD_SECURITY = {
    # Size limits
    'MAX_FILE_SIZE_MB': MAX_GAME_ZIP_SIZE_MB,
    'MAX_FILES_IN_ZIP': 1000,
    'MAX_FILENAME_LENGTH': 255,
    'MAX_TOTAL_EXTRACTED_SIZE_MB': MAX_GAME_ZIP_SIZE_MB * 3,  # 150MB default
    
    # File type restrictions
    'ALLOWED_EXTENSIONS': ['.zip'],
    'ALLOWED_MIME_TYPES': [
        'application/zip',
        'application/x-zip-compressed', 
        'application/x-zip',
    ],
    
    # Security features
    'ENABLE_MAGIC_BYTE_CHECK': True,
    'ENABLE_CONTENT_SCANNING': True,
    'ENABLE_ENTROPY_ANALYSIS': True,
    'ENABLE_PATH_TRAVERSAL_CHECK': True,
    'ENABLE_COMPRESSION_BOMB_CHECK': True,
    
    # Thresholds
    'HIGH_ENTROPY_THRESHOLD': 7.5,
    'MAX_COMPRESSION_RATIO': 100,
    
    # Dangerous patterns (for content scanning)
    'SCAN_TEXT_FILES_ONLY': True,  # Only scan .html, .css, .js, etc.
    'MAX_SCAN_SIZE_KB': 64,        # Only scan first 64KB of files
}

# Optional: Python-magic dependency for enhanced file type detection
# If python-magic is not installed, fallback to magic byte checking
FILE_UPLOAD_USE_PYTHON_MAGIC = False  # Set to True if you install python-magic

# Django REST Framework global settings
REST_FRAMEWORK = {
    # Default permissions
    'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.IsAuthenticatedOrReadOnly',
    ],
    
    # Default filters
    'DEFAULT_FILTER_BACKENDS': [
        'django_filters.rest_framework.DjangoFilterBackend',
        'rest_framework.filters.SearchFilter',
        'rest_framework.filters.OrderingFilter',
    ],
    
    # Pagination for performance optimization
    'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.PageNumberPagination',
    'PAGE_SIZE': 20,  # 20 items per page for optimal performance
    
    # Custom exception handler
    'EXCEPTION_HANDLER': 'games.utils.custom_exception_handler',
    
    # JWT Authentication
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'rest_framework_simplejwt.authentication.JWTAuthentication',
        'rest_framework.authentication.SessionAuthentication',  # For DRF browsable API
    ],
}

# =============================================================================
# JWT AUTHENTICATION CONFIGURATION
# =============================================================================

from datetime import timedelta

# Simple JWT Configuration
SIMPLE_JWT = {
    # Token lifetimes
    'ACCESS_TOKEN_LIFETIME': timedelta(minutes=60),     # 1 hour
    'REFRESH_TOKEN_LIFETIME': timedelta(days=7),        # 7 days
    'SLIDING_TOKEN_LIFETIME': timedelta(minutes=60),
    'SLIDING_TOKEN_REFRESH_LIFETIME': timedelta(days=7),

    # Security features
    'ROTATE_REFRESH_TOKENS': True,                      # Generate new refresh token on refresh
    'BLACKLIST_AFTER_ROTATION': True,                  # Blacklist old refresh tokens
    'UPDATE_LAST_LOGIN': True,                          # Update last_login field on login
    
    # Token signing
    'ALGORITHM': 'HS256',                               # Signing algorithm
    'SIGNING_KEY': SECRET_KEY,                          # Use Django secret key
    'VERIFYING_KEY': None,
    'AUDIENCE': None,
    'ISSUER': None,
    'JSON_ENCODER': None,
    'JWK_URL': None,
    'LEEWAY': 0,

    # Auth header configuration
    'AUTH_HEADER_TYPES': ('Bearer',),                  # Authorization: Bearer <token>
    'AUTH_HEADER_NAME': 'HTTP_AUTHORIZATION',
    'USER_ID_FIELD': 'id',
    'USER_ID_CLAIM': 'user_id',
    'USER_AUTHENTICATION_RULE': 'rest_framework_simplejwt.authentication.default_user_authentication_rule',

    # Token classes
    'AUTH_TOKEN_CLASSES': ('rest_framework_simplejwt.tokens.AccessToken',),
    'TOKEN_TYPE_CLAIM': 'token_type',
    'TOKEN_USER_CLASS': 'rest_framework_simplejwt.models.TokenUser',

    # Sliding tokens (alternative to refresh tokens)
    'SLIDING_TOKEN_REFRESH_EXP_CLAIM': 'refresh_exp',
    'SLIDING_TOKEN_LIFETIME_CLAIM': 'exp',
    'SLIDING_TOKEN_REFRESH_LIFETIME_CLAIM': 'refresh_exp',
}

# Logging Configuration
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'verbose': {
            'format': '{levelname} {asctime} {module} {process:d} {thread:d} {message}',
            'style': '{',
        },
        'simple': {
            'format': '{levelname} {message}',
            'style': '{',
        },
        'json': {
            'format': '{"level": "%(levelname)s", "time": "%(asctime)s", "module": "%(module)s", "message": "%(message)s"}',
        },
    },
    'handlers': {
        'file': {
            'level': 'INFO',
            'class': 'logging.FileHandler',
            'filename': BASE_DIR / 'logs/django.log',
            'formatter': 'verbose',
        },
        'error_file': {
            'level': 'ERROR',
            'class': 'logging.FileHandler',
            'filename': BASE_DIR / 'logs/django_errors.log',
            'formatter': 'verbose',
        },
        'console': {
            'level': 'INFO',
            'class': 'logging.StreamHandler',
            'formatter': 'simple',
        },
    },
    'root': {
        'handlers': ['console', 'file'],
        'level': 'INFO',
    },
    'loggers': {
        'django': {
            'handlers': ['console', 'file'],
            'level': 'INFO',
            'propagate': False,
        },
        'django.request': {
            'handlers': ['error_file', 'console'],
            'level': 'ERROR',
            'propagate': False,
        },
        'games': {
            'handlers': ['console', 'file', 'error_file'],
            'level': 'INFO',
            'propagate': False,
        },
        'users': {
            'handlers': ['console', 'file', 'error_file'],
            'level': 'INFO',
            'propagate': False,
        },
        'interactions': {
            'handlers': ['console', 'file', 'error_file'],
            'level': 'INFO',
            'propagate': False,
        },
    },
}

# =============================================================================
# CORS (Cross-Origin Resource Sharing) Configuration
# =============================================================================

# CORS allows web applications running at one origin (domain, protocol, or port)
# to access resources from another origin. This is essential for frontend-backend
# communication when they're served from different domains/ports.

# Development vs Production CORS Settings
DEBUG_CORS = True  # Set to False in production

if DEBUG_CORS:
    # 🔓 DEVELOPMENT SETTINGS (Relaxed for local development)
    
    # Allow all origins during development (NOT for production!)
    CORS_ALLOW_ALL_ORIGINS = True
    
    # Allow credentials (cookies, authorization headers, etc.)
    CORS_ALLOW_CREDENTIALS = True
    
    # Allowed origins for development
    CORS_ALLOWED_ORIGINS = [
        "http://localhost:3000",     # React development server
        "http://127.0.0.1:3000",     # Alternative React dev server
        "http://localhost:3001",     # Alternative frontend port
        "http://localhost:8080",     # Vue.js development server
        "http://127.0.0.1:8080",     # Alternative Vue dev server
        "http://localhost:5173",     # Vite development server
        "http://127.0.0.1:5173",     # Alternative Vite dev server
    ]
    
else:
    # 🔒 PRODUCTION SETTINGS (Strict for security)
    
    # Only allow specific origins in production
    CORS_ALLOW_ALL_ORIGINS = False
    
    # Production origins (update these with your actual domains)
    CORS_ALLOWED_ORIGINS = [
        "https://yourdomain.com",
        "https://www.yourdomain.com",
        "https://app.yourdomain.com",
    ]

# Allowed headers for CORS requests
CORS_ALLOW_HEADERS = [
    'accept',
    'accept-encoding',
    'authorization',
    'content-type',
    'dnt',
    'origin',
    'user-agent',
    'x-csrftoken',
    'x-requested-with',
    # Custom headers for your API
    'x-api-key',
    'x-client-version',
]

# Allowed HTTP methods for CORS requests
CORS_ALLOW_METHODS = [
    'DELETE',
    'GET',
    'OPTIONS',
    'PATCH',
    'POST',
    'PUT',
]

# Preflight cache duration (in seconds)
# How long browsers cache CORS preflight responses
CORS_PREFLIGHT_MAX_AGE = 86400  # 24 hours

# Security headers for CORS
CORS_EXPOSE_HEADERS = [
    'Content-Type',
    'X-Total-Count',      # For pagination
    'X-Rate-Limit-Remaining',  # For rate limiting info
    'X-Rate-Limit-Reset',      # For rate limiting info
]

# =============================================================================
# Additional Security Settings for CORS
# =============================================================================

# Only allow HTTPS in production (set to True in production)
SECURE_SSL_REDIRECT = False  # Set to True in production with HTTPS

# Prevent clickjacking attacks
X_FRAME_OPTIONS = 'DENY'

# Prevent MIME type sniffing
SECURE_CONTENT_TYPE_NOSNIFF = True

# XSS Protection
SECURE_BROWSER_XSS_FILTER = True

# CSRF Settings for API
CSRF_TRUSTED_ORIGINS = [
    "http://localhost:3000",
    "http://127.0.0.1:3000",
    # Add your production domains here:
    # "https://yourdomain.com",
]

# =============================================================================
# CACHE CONFIGURATION FOR RATE LIMITING
# =============================================================================

# Cache Configuration for Simple Rate Limiting System
# Using database cache as fallback, but Redis is recommended for production
CACHES = {
    'default': {
        'BACKEND': 'django.core.cache.backends.db.DatabaseCache',
        'LOCATION': 'cache_table',
        'OPTIONS': {
            'MAX_ENTRIES': 10000,
            'CULL_FREQUENCY': 3,  # Remove 1/3 of entries when MAX_ENTRIES reached
        },
        'TIMEOUT': 3600,  # Default cache timeout: 1 hour
    }
}

# Simple Rate Limiting Configuration
SIMPLE_RATE_LIMITING = {
    'ENABLE_LOGGING': True,
    'LOG_VIOLATIONS_ONLY': True,  # Only log when limits are exceeded
    'GLOBAL_API_LIMITS': {
        'authenticated_users': 1000,  # requests per hour
        'anonymous_users': 100,       # requests per hour
    },
    'EXEMPT_IPS': [
        '127.0.0.1',  # Localhost
        '::1',        # IPv6 localhost
    ]
}

# =============================================================================
# EMAIL CONFIGURATION FOR VERIFICATION SYSTEM
# =============================================================================

# Email backend configuration
EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'

# Gmail SMTP settings (from .env file)
EMAIL_HOST = os.getenv('EMAIL_HOST', 'smtp.gmail.com')
EMAIL_PORT = int(os.getenv('EMAIL_PORT', 587))
EMAIL_USE_TLS = True
EMAIL_USE_SSL = False
EMAIL_HOST_USER = os.getenv('EMAIL_USER')
EMAIL_HOST_PASSWORD = os.getenv('EMAIL_PASSWORD')

# Default sender information
DEFAULT_FROM_EMAIL = 'BRIDG Ekibi <noreply@bridg-platform.com>'
SERVER_EMAIL = DEFAULT_FROM_EMAIL

# Email verification settings
EMAIL_VERIFICATION = {
    'CODE_LENGTH': 6,                    # 6 haneli kod
    'EXPIRE_MINUTES': 15,                # 15 dakika geçerlilik
    'MAX_ATTEMPTS': 5,                   # Maksimum deneme sayısı
    'RESEND_COOLDOWN_MINUTES': 1,        # Yeniden gönderme bekleme süresi
    'RATE_LIMIT_PER_HOUR': 5,            # Saatte maksimum email sayısı
    'ENABLE_WELCOME_EMAIL': True,        # Doğrulama sonrası hoş geldin email'i
}

# Email template paths
EMAIL_TEMPLATES = {
    'verification': 'emails/verification_email.html',
    'welcome': 'emails/welcome_email.html',
    'password_reset': 'emails/password_reset.html',
}

# Console backend for development (if EMAIL_HOST_USER not set)
if not EMAIL_HOST_USER:
    EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'
    print("⚠️  EMAIL: Using console backend - emails will be printed to console")
else:
    print(f"📧 EMAIL: Using SMTP backend - {EMAIL_HOST}:{EMAIL_PORT}")

# Email security settings
EMAIL_TIMEOUT = 30  # 30 saniye timeout
EMAIL_SSL_CERTFILE = None
EMAIL_SSL_KEYFILE = None