"""
Django settings for gamehost_project project.

Generated by 'django-admin startproject' using Django 5.2.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

import os
from pathlib import Path
from dotenv import load_dotenv

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Load environment variables from .env file
load_dotenv(BASE_DIR / '.env')

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.getenv('SECRET_KEY')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True  # Keep this as True for development, set to False in production

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',

    # Third-party apps (We'll add DRF, etc. here later)
    'rest_framework',  # Django REST Framework for API development
    'rest_framework.authtoken',  # Token authentication for DRF


    # Our local apps (Using AppConfig paths)
    'games.apps.GamesConfig',
    'users.apps.UsersConfig',
    'interactions.apps.InteractionsConfig',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'gamehost_project.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'gamehost_project.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql', # Use the PostgreSQL engine
        'NAME': os.getenv('DB_NAME'),             # Read DB Name from .env
        'USER': os.getenv('DB_USER'),             # Read DB User from .env
        'PASSWORD': os.getenv('DB_PASSWORD'),       # Read DB Password from .env
        'HOST': os.getenv('DB_HOST', 'localhost'), # Read DB Host, default to localhost
        'PORT': os.getenv('DB_PORT', '5432'),      # Read DB Port, default to 5432
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = 'static/'

# backend/gamehost_project/settings.py
# ... (diğer ayarlar) ...

# Media files (User-uploaded files)
# https://docs.djangoproject.com/en/dev/ref/settings/#media-root
# https://docs.djangoproject.com/en/dev/ref/settings/#media-url

MEDIA_URL = '/media/' # Yüklenen dosyalara erişim için URL ön eki (örneğin, http://localhost:8000/media/dosya.jpg)
MEDIA_ROOT = BASE_DIR / 'media' # Yüklenen dosyaların sunucuda saklanacağı ana dizin
                                # BASE_DIR projenin backend klasörünü gösterir.
                                # backend/media/ dizini oluşturulacak.

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'


# Django REST Framework global settings
REST_FRAMEWORK = {
    # Varsayılan İzin Sınıfları (Default Permission Classes)
    # Bu ayar, API endpoint'lerine erişim için varsayılan politikayı belirler.
    'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.IsAuthenticatedOrReadOnly',
    ],

    # Varsayılan Kimlik Doğrulama Sınıfları (Default Authentication Classes)
    # Bu ayar, API isteklerinde kullanıcı kimliğinin nasıl doğrulanacağını belirler.
    # Şimdilik boş bırakabiliriz veya SessionAuthentication ve BasicAuthentication'ı
    # tarayıcıda görüntülenebilir API için ekleyebiliriz. TokenAuthentication'ı sonra ekleyeceğiz.
    # 'DEFAULT_AUTHENTICATION_CLASSES': [
    #     'rest_framework.authentication.SessionAuthentication', # Tarayıcıda görüntülenebilir API için
    #     'rest_framework.authentication.BasicAuthentication',   # Basit HTTP Basic Auth için
    # ],

    # Tarayıcıda Görüntülenebilir API için Sayfalama (Pagination)
    # API'den çok sayıda kayıt döndüğünde performansı artırmak için sayfalama kullanılır.
    # 'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.PageNumberPagination',
    # 'PAGE_SIZE': 10, # Her sayfada gösterilecek kayıt sayısı

    'DEFAULT_AUTHENTICATION_CLASSES': [
        # API isteklerinde kullanıcı kimliğini doğrulamak için kullanılacak yöntemler.
        # TokenAuthentication, 'Authorization: Token <token_value>' başlığını arar.
        'rest_framework.authentication.TokenAuthentication',

        # Tarayıcıda görüntülenebilir API (Browsable API) üzerinden test yaparken
        # veya session tabanlı kimlik doğrulama kullanmak isterseniz bunları da ekleyebilirsiniz.
        # Ancak SPA (Single Page Application) ile token tabanlı çalışırken
        # TokenAuthentication genellikle ana yöntemdir.
        # 'rest_framework.authentication.SessionAuthentication',
        # 'rest_framework.authentication.BasicAuthentication',
    ]
}